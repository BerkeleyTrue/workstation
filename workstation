#!/bin/bash
APLAY=ansible-playbook
INVENTORY='--inventory hosts.ini'
PASSARG='ansible_password=$PASS'
TAGS=''
PASS=''

# create a map of the playbook names to the playbook files

declare -A PLAYBOOKS

PLAYBOOKS[main]='main_playbook.yml'
PLAYBOOKS[container]='container_playbook.yml'
PLAYBOOKS[user_packages]='user_packages_playbook.yml'
PLAYBOOKS[update]='update_playbook.yml'
PLAYBOOKS[user_space]='user_space_playbook.yml'

PLAYBOOKS_IDX=(update user_packages user_space main container)

declare -A PLAYBOOK_TAGS

PLAYBOOK_TAGS[update]='update'
PLAYBOOK_TAGS[user_packages]='user-packages'

declare -A REQUIRES_ROOT

REQUIRES_ROOT[main]='true'
REQUIRES_ROOT[container]='true'
REQUIRES_ROOT[user_packages]='true'
REQUIRES_ROOT[update]='true'
REQUIRES_ROOT[user_space]='true'

echo 'choose a playbook'

# use gum to have the user choose a playbook based on the keys in the map
playbook_key=$(gum choose "${PLAYBOOKS_IDX[@]}")

if [ -z "$playbook_key" ]; then
  echo 'no playbook chosen'
  exit 1
fi

# get the playbook file name from the map
playbook=${PLAYBOOKS[$playbook_key]}

# create a tags argument if playbook has tags
if [ -n "${PLAYBOOK_TAGS[$playbook_key]}" ]; then
  TAGS="--tags ${PLAYBOOK_TAGS[$playbook_key]}"
fi

# grab the sudo password if the playbook requires root
# and test it to before running the playbook
if [ -n "${REQUIRES_ROOT[$playbook_key]}" ]; then
  PASS=$(gum input --password --prompt 'password=>')

  if [[ -z $PASS ]]; then
    echo "No password provided"
    exit 1
  fi
fi

if [[ -n $playbook ]]; then
  echo "Running $APLAY $playbook $INVENTORY $TAGS"
  eval "$APLAY $playbook $INVENTORY $TAGS -e 'ansible_sudo_pass=\"$PASS\"' "
fi
